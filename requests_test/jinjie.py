# '''
# 面向过程：根据业务逻辑从上到下的代码
# 函数式：将某些功能封装到函数中，日后便无需重复编写，仅调用函数，减少重复代码的重写过程
#
#
# 面向过程：最易被初学者接受，其往往用一大段代码来实现指定功能，开发思路是将数据与函数按照
# 执行逻辑顺序组织在一起，数据与函数分开考虑
# '''
#
while True:
    if cpu利用率 > 90%
#发送邮件
    链接邮件服务器
    发送邮件
    关闭链接

while True:
    if 硬盘利用率 > 90%
    链接邮件服务器
    发送邮件
    关闭链接

while True:
    if 内存利用率 > 90%
    链接邮件服务器
    发送邮件
    关闭链接
#
#
# # 函数式编程
# def 发送邮件(内容):
#     链接邮件服务器
#     发送邮件
#     关闭链接
#
while True:
    if cpu利用率 > 90%
            def 发送邮件(cpu报警):
while True:
    if 硬盘利用率 > 90%
        def 发送邮件(硬盘报警):

while True:
    if 内存利用率 > 90%
        def 发送邮件(内存报警):
#
#
# # 面向过程
# a = 1
# b = 2
# if a>b:
#     print(a)
# else:
#     print(b)
#
# # 函数式编程
#
# def func():
#     if a > b:
#         print(a)
#     else:
#         print(b)
#
#
# 洗车的两种方式：
# （-）：
# 1.自己冲淘宝买洗车工具
# 2.需找便宜的，找优惠券，跟店长砍价
# 3.接水管，冲，然后上清洁剂
# 4.没洗干净，重新洗
# 5.然后水泵坏了，然后重新来
#
# 什么东西都自己做
# （二）
# 1.找一个靠谱的洗车店
# 2.把车交给他，让他洗
#
# 把车给他，不用操心，强调的是洗车店，具体怎么洗，不用关心，这种解题思路叫面向对象
#
# '''
# 面向对象:按人们认识客观世界的系统思维方式,采用基于对象(实体)的概念建立模型,模拟客观世界分析
# 设计·实现软件的办法
# 面问对象编程( Object Oriented Programming-OOP)是一种解决软件复用的设计和编程方法·这种方法把软
# 件系统中相近相似的操作逻拉和操作应用数据·状态,以类的型式描出来,以对意实例的形式在软件系统中
# 复用以达到提高软件开发效率的作用
# '''
#
# class People(object):
#     name = '小明'
#     age =  12
#     def eat(self):
#         print('大口吃肉')

'''
函数直接调用，函数名（）
对象调用方法 对象.方法（）
'''

# _init_方法
# _  init_  方法在创建对象的时候自动调用,如链接数据库，初始化一个数据
class Animal():
    def __init__(self):
        self.name = '旺财'
        self.age ='2'
    def eat(self):
        print('吃饭')

dog = Animal()
print(dog.name)

